{"version":3,"file":"visual.js","mappings":"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AAC,MAAM,GAAC,CAAC,CAAC,YAAY,CAAC,GAAC,IAAI,CAAC,GAAC,EAAE,CAAC,CAAC,QAAQ,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC;aAErI;QAGH,CAAC,CAAC,CACD;IAEH,CAAC;IAGD;;;OAGG;IACI,kBAAkB;QACrB,OAAO,IAAI,CAAC,yBAAyB,CAAC,oBAAoB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IACxF,CAAC;CACJ;;;;;;;;;;;;;;;ACxLD;AACA;AACA;AACA;AAC4E;AAC5E;AACA;AACO;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,2BAA2B;AACxE;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,wBAAwB,kFAAsC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,qBAAqB,qFAAyC;AAC9D;AACA;AACO,6BAA6B,2DAAW;AAC/C;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,gEAAgE;AAC5J;AACA;AACO,2BAA2B,2DAAW;AAC7C;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,oFAAoF;AAChL;AACA;AACO,wBAAwB,2DAAW;AAC1C;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,uBAAuB;AACnH;AACA;AACO,qBAAqB,yDAAS;AACrC;AACA;AACA;AACA;AACA;AACO,yBAAyB,2DAAW;AAC3C;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,qKAAqK;AACjQ;AACA;AACO,2BAA2B,2DAAW;AAC7C;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,mBAAmB;AAC/G;AACA;AACO,2BAA2B,2DAAW;AAC7C;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,gEAAgE;AAC5J;AACA;AACO,6BAA6B,2DAAW;AAC/C;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,6BAA6B;AACzH;AACA;AACO,gCAAgC,2DAAW;AAClD;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,6BAA6B;AACzH;AACA;AACO,0BAA0B,2DAAW;AAC5C;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,4EAA4E;AACxK;AACA;AACO,iCAAiC,2DAAW;AACnD;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,mBAAmB;AAC/G;AACA;AACO,iCAAiC,2DAAW;AACnD;AACA;AACA;AACA;AACA;AACO,wBAAwB,2DAAW;AAC1C;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,+BAA+B;AAC3H;AACA;AACO,uBAAuB,yDAAS;AACvC;AACA;AACA;AACA;AACA;AACO,yBAAyB,2DAAW;AAC3C;AACA;AACA;AACA;AACA;AACO,0BAA0B,2DAAW;AAC5C;AACA;AACA;AACA;AACA;AACO,0BAA0B,2DAAW;AAC5C;AACA;AACA;AACA;AACA;AACO,yBAAyB,2DAAW;AAC3C;AACA;AACA;AACA;AACA;AACO,2BAA2B,2DAAW;AAC7C;AACA;AACA;AACA;AACA;AACO,+BAA+B,2DAAW;AACjD;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,yDAAyD;AACrJ;AACA;AACO,6BAA6B,2DAAW;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,2BAA2B;AACxE;AACA;AACA,eAAe;AACf;AACA;AACO,0BAA0B,8DAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,4BAA4B,8DAAc;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,wBAAwB,2DAAW;AAC1C;AACO,4BAA4B,2DAAW;AAC9C;AACA;;;;;;;;;;;AC9SO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,oBAAoB,GAAG,uBAAuB;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iEAAe,yBAAyB,EAAC;AACzC;;;;;;;;;;;AC9IA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACrCA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACN0C;AAK1C,IAAI,UAAU,GAAQ,SAAS,CAAC;AAChC,IAAI,OAAO,GAAQ,MAAM,CAAC,UAAU,CAAC,CAAC;AACtC,IAAI,8CAA8C,GAAkB;IAChE,IAAI,EAAE,gDAAgD;IACtD,WAAW,EAAE,UAAU;IACvB,KAAK,EAAE,QAAQ;IACf,UAAU,EAAE,OAAO;IACnB,MAAM,EAAE,CAAC,OAAiC,EAAE,EAAE;QAC1C,IAAI,wDAAM,EAAE;YACR,OAAO,IAAI,wDAAM,CAAC,OAAO,CAAC,CAAC;SAC9B;QACD,MAAM,2BAA2B,CAAC;IACtC,CAAC;IACD,iBAAiB,EAAE,CAAC,QAAgB,EAAE,OAAiC,EAAE,YAAoB,EAAE,EAAE;QAC7F,MAAM,cAAc,GAAG,UAAU,CAAC,cAAc,CAAC;QACjD,IAAI,QAAQ,IAAI,cAAc,EAAE;YAC5B,IAAI,cAAc,CAAC,QAAQ,CAAC,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;SACvD;IACL,CAAC;IACD,MAAM,EAAE,IAAI;CACf,CAAC;AACF,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;IAChC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;IACxC,OAAO,CAAC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;IACxD,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,gDAAgD,CAAC,GAAG,8CAA8C,CAAC;CAC9H;AACD,iEAAe,8CAA8C,EAAC","sources":["webpack:///./src/settings.ts","webpack:///./src/visual.ts","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/FormattingSettingsComponents.js","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/FormattingSettingsService.js","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/utils/FormattingSettingsUtils.js","webpack:///external var \"Function('return this')()\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./.tmp/precompile/visualPlugin.ts"],"sourcesContent":["/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\n\"use strict\";\n\nimport { formattingSettings } from \"powerbi-visuals-utils-formattingmodel\";\n\nimport FormattingSettingsCard = formattingSettings.Card;\nimport FormattingSettingsSlice = formattingSettings.Slice;\nimport FormattingSettingsModel = formattingSettings.Model;\n\n/**\n * Data Point Formatting Card\n */\nclass DataPointCardSettings extends FormattingSettingsCard {\n    colorFerme = new formattingSettings.ColorPicker({\n        name: \"colorFerme\",\n        displayName: \"Couleur du ferme\",\n        value: { value: \"\" }\n    });\n\n    colorPrevis = new formattingSettings.ColorPicker({\n        name: \"colorPrevis\",\n        displayName: \"Couleur du previs\",\n        value: { value: \"\" }\n    });\n\n    name: string = \"dataPoint\";\n    displayName: string = \"Data colors\";\n    slices: Array<FormattingSettingsSlice> = [this.colorFerme, this.colorPrevis];\n}\n\n/**\n* visual settings model class\n*\n*/\nexport class VisualFormattingSettingsModel extends FormattingSettingsModel {\n    // Create formatting settings model formatting cards\n    dataPointCard = new DataPointCardSettings();\n\n    cards = [this.dataPointCard];\n}\n","/*\n*  Power BI Visual CLI\n*\n*  Copyright (c) Microsoft Corporation\n*  All rights reserved.\n*  MIT License\n*\n*  Permission is hereby granted, free of charge, to any person obtaining a copy\n*  of this software and associated documentation files (the \"\"Software\"\"), to deal\n*  in the Software without restriction, including without limitation the rights\n*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n*  copies of the Software, and to permit persons to whom the Software is\n*  furnished to do so, subject to the following conditions:\n*\n*  The above copyright notice and this permission notice shall be included in\n*  all copies or substantial portions of the Software.\n*\n*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n*  THE SOFTWARE.\n*/\n\"use strict\";\n\nimport powerbi from \"powerbi-visuals-api\";\nimport { FormattingSettingsService } from \"powerbi-visuals-utils-formattingmodel\";\nimport \"./../style/visual.less\";\n\nimport VisualConstructorOptions = powerbi.extensibility.visual.VisualConstructorOptions;\nimport VisualUpdateOptions = powerbi.extensibility.visual.VisualUpdateOptions;\nimport IVisual = powerbi.extensibility.visual.IVisual;\nimport DataView = powerbi.DataView;\nimport DataViewTable = powerbi.DataViewTable;\nimport DataViewTableRow = powerbi.DataViewTableRow;\n\nimport { VisualFormattingSettingsModel } from \"./settings\";\n\nexport class Visual implements IVisual {\n\n    private formattingSettings: VisualFormattingSettingsModel;\n    private formattingSettingsService: FormattingSettingsService;\n\n    private graphRootDiv: HTMLElement;\n    private target: HTMLElement;\n    \n\n    constructor(options: VisualConstructorOptions) {\n\n    this.formattingSettingsService = new FormattingSettingsService();\n     \n\n\n        this.target = options.element;\n\n        if (document) {\n            this.graphRootDiv = document.createElement(\"div\");\n            this.graphRootDiv.classList.add(\"barChart\");\n            this.target.appendChild(this.graphRootDiv);\n            \n\n            \n        \n        }\n\n\n      \n        \n\n    }\n     \n\n\n    public update(options: VisualUpdateOptions) {\n\n\n\n        this.formattingSettings = this.formattingSettingsService.populateFormattingSettingsModel(VisualFormattingSettingsModel, options.dataViews);\n\n        const dataView: DataView = options.dataViews[0];\n        const tableDataView: DataViewTable = dataView.table;\n\n\n        console.log( this.formattingSettings);\n\n\n        if (!tableDataView) \n            return;\n        \n\n\n        let TableData = [];\n\n        \n        //creation of a table of objects\n        tableDataView.rows.forEach((row: DataViewTableRow) => {\n  \n\n            let dataRow : any = {};\n\n\n            // This filter allows to get the data in a simple table\n            dataRow.category1 = row[tableDataView.columns.filter((d) => d.roles.category1 != undefined )[0].index];\n            dataRow.TxChargeable = row[tableDataView.columns.filter((d) => d.roles.TxChargeable != undefined )[0].index];\n            dataRow.TxPrevis = row[tableDataView.columns.filter((d) => d.roles.TxPrevis != undefined )[0].index];\n            dataRow.Budget = row[tableDataView.columns.filter((d) => d.roles.Budget != undefined )[0].index];\n           \n            TableData.push(dataRow);\n    \n          \n        });\n\n\n        this.graphRootDiv.innerHTML = \"\";\n\n      const ordinate =  this.graphRootDiv.appendChild(document.createElement(\"div\"));\n      ordinate.classList.add(\"barChart-ordinate\");\n\n\n      TableData.forEach((d) => \n      {\n\n        let barChartElement =  this.graphRootDiv.appendChild(document.createElement(\"div\"));\n        barChartElement.classList.add(\"barChart-Element\");\n        barChartElement.setAttribute(\"style\", \"height:calc(\" + (100/TableData.length).toString() + \"% - 10px);\");\n\n        let barChartElementAligner =  barChartElement.appendChild(document.createElement(\"div\"));\n        barChartElementAligner.classList.add(\"barChart-Element-Aligner\");\n  \n\n        let barChartElementLegend =  barChartElement.appendChild(document.createElement(\"div\"));\n        barChartElementLegend.classList.add(\"barChart-Element-legend\");\n        barChartElementLegend.appendChild(document.createTextNode(d.category1));\n        \n\n        let barChartElementBar =  barChartElement.appendChild(document.createElement(\"div\"));\n        barChartElementBar.classList.add(\"barChart-Element-bar\");\n\n        let barChartElementInner1 =  barChartElementBar.appendChild(document.createElement(\"div\"));\n        barChartElementInner1.classList.add(\"barChart-Element-inner\");\n        barChartElementInner1.classList.add(\"color1\");\n        barChartElementInner1.setAttribute(\"style\", \"width: \"  + (100 * d.TxChargeable).toString() + \"%;\");\n\n        let barChartElementInner2 =  barChartElementBar.appendChild(document.createElement(\"div\"));\n        barChartElementInner2.classList.add(\"barChart-Element-inner\");\n        barChartElementInner2.classList.add(\"color2\");\n        barChartElementInner2.setAttribute(\"style\", \"width: \"  + (100 * d.TxPrevis).toString() + \"%;\");\n\n        let barChartElementInnerText =  barChartElementBar.appendChild(document.createElement(\"div\"));\n        barChartElementInnerText.classList.add(\"barChart-Element-innerText\");\n        barChartElementInnerText.appendChild(document.createTextNode((Math.round((d.TxChargeable+d.TxPrevis)*1000)/10).toString() + '%'));\n\n        if (d.Budget) // On display le budget que s'il y a un budget\n        {\n          let barChartElementBudget =  barChartElement.appendChild(document.createElement(\"div\"));\n          barChartElementBudget.classList.add(\"barChart-Element-budget\");\n  \n          if (d.Budget > d.TxChargeable)\n          barChartElementBudget.classList.add(\"colorBad\");\n  \n          else\n          barChartElementBudget.classList.add(\"colorGood\");\n          \n          let sign  = d.Budget > d.TxChargeable ? '▼-' : '▲+';\n          barChartElementBudget.appendChild(document.createTextNode(sign + (Math.round((d.Budget-d.TxChargeable)*1000)/10).toString() + '%'));\n  \n        }\n\n\n      })\n      ;\n\n    }\n    \n\n    /**\n     * Returns properties pane formatting model content hierarchies, properties and latest formatting values, Then populate properties pane.\n     * This method is called once every time we open properties pane or when the user edit any format property. \n     */\n    public getFormattingModel(): powerbi.visuals.FormattingModel {\n        return this.formattingSettingsService.buildFormattingModel(this.formattingSettings);\n    }\n}","/**\n * Powerbi utils components classes for custom visual formatting pane objects\n *\n */\nimport * as FormattingSettingsParser from \"./utils/FormattingSettingsUtils\";\nclass NamedEntity {\n}\nexport class Model {\n}\nexport class Card extends NamedEntity {\n    getFormattingCard(objectName, group, localizationManager) {\n        return {\n            displayName: (localizationManager && this.displayNameKey)\n                ? localizationManager.getDisplayName(this.displayNameKey) : this.displayName,\n            description: (localizationManager && this.descriptionKey)\n                ? localizationManager.getDisplayName(this.descriptionKey) : this.description,\n            groups: [group],\n            uid: objectName,\n            analyticsPane: this.analyticsPane\n        };\n    }\n}\nexport class SimpleSlice extends NamedEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n    getFormattingSlice(objectName, localizationManager) {\n        const controlType = this.type;\n        const propertyName = this.name;\n        const sliceDisplayName = (localizationManager && this.displayNameKey) ? localizationManager.getDisplayName(this.displayNameKey) : this.displayName;\n        const sliceDescription = (localizationManager && this.descriptionKey) ? localizationManager.getDisplayName(this.descriptionKey) : this.description;\n        const componentDisplayName = {\n            displayName: sliceDisplayName,\n            description: sliceDescription,\n            uid: objectName + '-' + propertyName,\n        };\n        return Object.assign(Object.assign({}, componentDisplayName), { control: {\n                type: controlType,\n                properties: this.getFormattingComponent(objectName, localizationManager)\n            } });\n    }\n    getFormattingComponent(objectName, localizationManager) {\n        return {\n            descriptor: FormattingSettingsParser.getDescriptor(objectName, this),\n            value: this.value,\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return [{\n                objectName: objectName,\n                propertyName: this.name\n            }];\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        var _a;\n        let newValue = (_a = dataViewObjects === null || dataViewObjects === void 0 ? void 0 : dataViewObjects[objectName]) === null || _a === void 0 ? void 0 : _a[this.name];\n        this.value = FormattingSettingsParser.getPropertyValue(this, newValue, this.value);\n    }\n}\nexport class AlignmentGroup extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"AlignmentGroup\" /* visuals.FormattingComponent.AlignmentGroup */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { mode: this.mode, supportsNoSelection: this.supportsNoSelection });\n    }\n}\nexport class ToggleSwitch extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ToggleSwitch\" /* visuals.FormattingComponent.ToggleSwitch */;\n    }\n}\nexport class ColorPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ColorPicker\" /* visuals.FormattingComponent.ColorPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { defaultColor: this.defaultColor, isNoFillItemSupported: this.isNoFillItemSupported });\n    }\n}\nexport class NumUpDown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"NumUpDown\" /* visuals.FormattingComponent.NumUpDown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { options: this.options });\n    }\n}\nexport class Slider extends NumUpDown {\n    constructor() {\n        super(...arguments);\n        this.type = \"Slider\" /* visuals.FormattingComponent.Slider */;\n    }\n}\nexport class DatePicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"DatePicker\" /* visuals.FormattingComponent.DatePicker */;\n    }\n    getFormattingComponent(objectName, localizationManager) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { placeholder: (localizationManager && this.placeholderKey) ? localizationManager.getDisplayName(this.placeholderKey) : this.placeholder, validators: this.validators });\n    }\n}\nexport class ItemDropdown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"Dropdown\" /* visuals.FormattingComponent.Dropdown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { items: this.items });\n    }\n}\nexport class AutoDropdown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"Dropdown\" /* visuals.FormattingComponent.Dropdown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { mergeValues: this.mergeValues, filterValues: this.filterValues });\n    }\n}\nexport class DurationPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"DurationPicker\" /* visuals.FormattingComponent.DurationPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators });\n    }\n}\nexport class ErrorRangeControl extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ErrorRangeControl\" /* visuals.FormattingComponent.ErrorRangeControl */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators });\n    }\n}\nexport class FieldPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FieldPicker\" /* visuals.FormattingComponent.FieldPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators, allowMultipleValues: this.allowMultipleValues });\n    }\n}\nexport class ItemFlagsSelection extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FlagsSelection\" /* visuals.FormattingComponent.FlagsSelection */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { items: this.items });\n    }\n}\nexport class AutoFlagsSelection extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"FlagsSelection\" /* visuals.FormattingComponent.FlagsSelection */;\n    }\n}\nexport class TextInput extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"TextInput\" /* visuals.FormattingComponent.TextInput */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { placeholder: this.placeholder });\n    }\n}\nexport class TextArea extends TextInput {\n    constructor() {\n        super(...arguments);\n        this.type = \"TextArea\" /* visuals.FormattingComponent.TextArea */;\n    }\n}\nexport class FontPicker extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"FontPicker\" /* visuals.FormattingComponent.FontPicker */;\n    }\n}\nexport class GradientBar extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"GradientBar\" /* visuals.FormattingComponent.GradientBar */;\n    }\n}\nexport class ImageUpload extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ImageUpload\" /* visuals.FormattingComponent.ImageUpload */;\n    }\n}\nexport class ListEditor extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ListEditor\" /* visuals.FormattingComponent.ListEditor */;\n    }\n}\nexport class ReadOnlyText extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ReadOnlyText\" /* visuals.FormattingComponent.ReadOnlyText */;\n    }\n}\nexport class ShapeMapSelector extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ShapeMapSelector\" /* visuals.FormattingComponent.ShapeMapSelector */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { isAzMapReferenceSelector: this.isAzMapReferenceSelector });\n    }\n}\nexport class CompositeSlice extends NamedEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n    getFormattingSlice(objectName) {\n        const controlType = this.type;\n        const propertyName = this.name;\n        const componentDisplayName = {\n            displayName: this.displayName,\n            description: this.description,\n            uid: objectName + '-' + propertyName,\n        };\n        return Object.assign(Object.assign({}, componentDisplayName), { control: {\n                type: controlType,\n                properties: this.getFormattingComponent(objectName)\n            } });\n    }\n}\nexport class FontControl extends CompositeSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FontControl\" /* visuals.FormattingComponent.FontControl */;\n    }\n    getFormattingComponent(objectName) {\n        var _a, _b, _c;\n        return {\n            fontFamily: this.fontFamily.getFormattingComponent(objectName),\n            fontSize: this.fontSize.getFormattingComponent(objectName),\n            bold: (_a = this.bold) === null || _a === void 0 ? void 0 : _a.getFormattingComponent(objectName),\n            italic: (_b = this.italic) === null || _b === void 0 ? void 0 : _b.getFormattingComponent(objectName),\n            underline: (_c = this.underline) === null || _c === void 0 ? void 0 : _c.getFormattingComponent(objectName)\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return this.fontFamily.getRevertToDefaultDescriptor(objectName)\n            .concat(this.fontSize.getRevertToDefaultDescriptor(objectName))\n            .concat(this.bold ? this.bold.getRevertToDefaultDescriptor(objectName) : [])\n            .concat(this.italic ? this.italic.getRevertToDefaultDescriptor(objectName) : [])\n            .concat(this.underline ? this.underline.getRevertToDefaultDescriptor(objectName) : []);\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        var _a, _b, _c;\n        this.fontFamily.setPropertiesValues(dataViewObjects, objectName);\n        this.fontSize.setPropertiesValues(dataViewObjects, objectName);\n        (_a = this.bold) === null || _a === void 0 ? void 0 : _a.setPropertiesValues(dataViewObjects, objectName);\n        (_b = this.italic) === null || _b === void 0 ? void 0 : _b.setPropertiesValues(dataViewObjects, objectName);\n        (_c = this.underline) === null || _c === void 0 ? void 0 : _c.setPropertiesValues(dataViewObjects, objectName);\n    }\n}\nexport class MarginPadding extends CompositeSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"MarginPadding\" /* visuals.FormattingComponent.MarginPadding */;\n    }\n    getFormattingComponent(objectName) {\n        return {\n            left: this.left.getFormattingComponent(objectName),\n            right: this.right.getFormattingComponent(objectName),\n            top: this.top.getFormattingComponent(objectName),\n            bottom: this.bottom.getFormattingComponent(objectName)\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return this.left.getRevertToDefaultDescriptor(objectName)\n            .concat(this.right.getRevertToDefaultDescriptor(objectName))\n            .concat(this.top.getRevertToDefaultDescriptor(objectName))\n            .concat(this.bottom.getRevertToDefaultDescriptor(objectName));\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        this.left.setPropertiesValues(dataViewObjects, objectName);\n        this.right.setPropertiesValues(dataViewObjects, objectName);\n        this.top.setPropertiesValues(dataViewObjects, objectName);\n        this.bottom.setPropertiesValues(dataViewObjects, objectName);\n    }\n}\nexport class Container extends NamedEntity {\n}\nexport class ContainerItem extends NamedEntity {\n}\n//# sourceMappingURL=FormattingSettingsComponents.js.map","export class FormattingSettingsService {\n    constructor(localizationManager) {\n        this.localizationManager = localizationManager;\n    }\n    /**\n     * Build visual formatting settings model from metadata dataView\n     *\n     * @param dataViews metadata dataView object\n     * @returns visual formatting settings model\n     */\n    populateFormattingSettingsModel(typeClass, dataViews) {\n        var _a, _b, _c;\n        let defaultSettings = new typeClass();\n        let dataViewObjects = (_b = (_a = dataViews === null || dataViews === void 0 ? void 0 : dataViews[0]) === null || _a === void 0 ? void 0 : _a.metadata) === null || _b === void 0 ? void 0 : _b.objects;\n        if (dataViewObjects) {\n            // loop over each formatting property and set its new value if exists\n            (_c = defaultSettings.cards) === null || _c === void 0 ? void 0 : _c.forEach((card) => {\n                var _a, _b, _c;\n                (_a = card === null || card === void 0 ? void 0 : card.slices) === null || _a === void 0 ? void 0 : _a.forEach((slice) => {\n                    slice === null || slice === void 0 ? void 0 : slice.setPropertiesValues(dataViewObjects, card.name);\n                });\n                (_c = (_b = card === null || card === void 0 ? void 0 : card.container) === null || _b === void 0 ? void 0 : _b.containerItems) === null || _c === void 0 ? void 0 : _c.forEach((containerItem) => {\n                    var _a;\n                    (_a = containerItem === null || containerItem === void 0 ? void 0 : containerItem.slices) === null || _a === void 0 ? void 0 : _a.forEach((slice) => {\n                        slice === null || slice === void 0 ? void 0 : slice.setPropertiesValues(dataViewObjects, card.name);\n                    });\n                });\n            });\n        }\n        return defaultSettings;\n    }\n    /**\n     * Build formatting model by parsing formatting settings model object\n     *\n     * @returns powerbi visual formatting model\n     */\n    buildFormattingModel(formattingSettingsModel) {\n        var _a;\n        let formattingModel = {\n            cards: []\n        };\n        (_a = formattingSettingsModel.cards) === null || _a === void 0 ? void 0 : _a.forEach((card) => {\n            if (!card)\n                return;\n            const objectName = card.name;\n            const groupUid = card.name + \"-group\";\n            let formattingGroup = {\n                displayName: undefined,\n                slices: [],\n                uid: groupUid\n            };\n            let formattingCard = card.getFormattingCard(objectName, formattingGroup, this.localizationManager);\n            formattingModel.cards.push(formattingCard);\n            // In case formatting model adds data points or top categories (Like when you modify specific visual category color).\n            // these categories use same object name and property name from capabilities and the generated uid will be the same for these formatting categories properties\n            // Solution => Save slice names to modify each slice uid to be unique by adding counter value to the new slice uid\n            const sliceNames = {};\n            // Build formatting container slice for each property\n            if (card.container) {\n                const container = card.container;\n                const containerUid = groupUid + \"-container\";\n                const formattingContainer = {\n                    displayName: (this.localizationManager && container.displayNameKey)\n                        ? this.localizationManager.getDisplayName(container.displayNameKey) : container.displayName,\n                    description: (this.localizationManager && container.descriptionKey)\n                        ? this.localizationManager.getDisplayName(container.descriptionKey) : container.description,\n                    containerItems: [],\n                    uid: containerUid\n                };\n                container.containerItems.forEach((containerItem) => {\n                    // Build formatting container item object\n                    const containerIemName = containerItem.displayNameKey ? containerItem.displayNameKey : containerItem.displayName;\n                    const containerItemUid = containerUid + containerIemName;\n                    let formattingContainerItem = {\n                        displayName: (this.localizationManager && containerItem.displayNameKey)\n                            ? this.localizationManager.getDisplayName(containerItem.displayNameKey) : containerItem.displayName,\n                        slices: [],\n                        uid: containerItemUid\n                    };\n                    // Build formatting slices and add them to current formatting container item\n                    this.buildFormattingSlices(containerItem.slices, objectName, sliceNames, formattingCard, formattingContainerItem.slices);\n                    formattingContainer.containerItems.push(formattingContainerItem);\n                });\n                formattingGroup.container = formattingContainer;\n            }\n            if (card.slices) {\n                // Build formatting slice for each property\n                this.buildFormattingSlices(card.slices, objectName, sliceNames, formattingCard, formattingGroup.slices);\n            }\n            formattingCard.revertToDefaultDescriptors = this.getRevertToDefaultDescriptor(card);\n        });\n        return formattingModel;\n    }\n    buildFormattingSlices(slices, objectName, sliceNames, formattingCard, formattingSlices) {\n        slices === null || slices === void 0 ? void 0 : slices.forEach((slice) => {\n            let formattingSlice = slice === null || slice === void 0 ? void 0 : slice.getFormattingSlice(objectName, this.localizationManager);\n            if (formattingSlice) {\n                // Modify formatting slice uid if needed\n                if (sliceNames[slice.name] === undefined) {\n                    sliceNames[slice.name] = 0;\n                }\n                else {\n                    sliceNames[slice.name]++;\n                    formattingSlice.uid = `${formattingSlice.uid}-${sliceNames[slice.name]}`;\n                }\n                // Set as topLevelToggle if topLevelToggle boolean was set to true\n                if (slice.topLevelToggle) {\n                    formattingSlice.suppressDisplayName = true;\n                    formattingCard.topLevelToggle = formattingSlice;\n                }\n                else {\n                    formattingSlices.push(formattingSlice);\n                }\n            }\n        });\n    }\n    getRevertToDefaultDescriptor(card) {\n        var _a, _b;\n        // Proceeded slice names are saved to prevent duplicated default descriptors in case of using \n        // formatting categories & selectors, since they have the same descriptor objectName and propertyName\n        const sliceNames = {};\n        let revertToDefaultDescriptors = [];\n        let cardSlicesDefaultDescriptors = this.getSlicesRevertToDefaultDescriptor(card.name, card.slices, sliceNames);\n        let cardContainerSlicesDefaultDescriptors = [];\n        (_b = (_a = card.container) === null || _a === void 0 ? void 0 : _a.containerItems) === null || _b === void 0 ? void 0 : _b.forEach((containerItem) => {\n            cardContainerSlicesDefaultDescriptors = cardContainerSlicesDefaultDescriptors.concat(this.getSlicesRevertToDefaultDescriptor(card.name, containerItem.slices, sliceNames));\n        });\n        revertToDefaultDescriptors = cardSlicesDefaultDescriptors.concat(cardContainerSlicesDefaultDescriptors);\n        return revertToDefaultDescriptors;\n    }\n    getSlicesRevertToDefaultDescriptor(cardName, slices, sliceNames) {\n        let revertToDefaultDescriptors = [];\n        slices === null || slices === void 0 ? void 0 : slices.forEach((slice) => {\n            if (slice && !sliceNames[slice.name]) {\n                sliceNames[slice.name] = true;\n                revertToDefaultDescriptors = revertToDefaultDescriptors.concat(slice.getRevertToDefaultDescriptor(cardName));\n            }\n        });\n        return revertToDefaultDescriptors;\n    }\n}\nexport default FormattingSettingsService;\n//# sourceMappingURL=FormattingSettingsService.js.map","/**\n * Build and return formatting descriptor for simple slice\n *\n * @param objectName Object name from capabilities\n * @param slice formatting simple slice\n * @returns simple slice formatting descriptor\n */\nexport function getDescriptor(objectName, slice) {\n    return {\n        objectName: objectName,\n        propertyName: slice.name,\n        selector: slice.selector,\n        altConstantValueSelector: slice.altConstantSelector,\n        instanceKind: slice.instanceKind\n    };\n}\n/**\n * Get property value from dataview objects if exists\n * Else return the default value from formatting settings object\n *\n * @param value dataview object value\n * @param defaultValue formatting settings default value\n * @returns formatting property value\n */\nexport function getPropertyValue(slice, value, defaultValue) {\n    if (value == null || (typeof value === \"object\" && !value.solid)) {\n        return defaultValue;\n    }\n    if (value.solid) {\n        return { value: value === null || value === void 0 ? void 0 : value.solid.color };\n    }\n    if (slice === null || slice === void 0 ? void 0 : slice.items) {\n        let itemsArray = slice.items;\n        return itemsArray.find(item => item.value == value);\n    }\n    return value;\n}\n//# sourceMappingURL=FormattingSettingsUtils.js.map","module.exports = Function('return this')();","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Visual } from \"../../src/visual\";\nimport powerbiVisualsApi from \"powerbi-visuals-api\";\nimport IVisualPlugin = powerbiVisualsApi.visuals.plugins.IVisualPlugin;\nimport VisualConstructorOptions = powerbiVisualsApi.extensibility.visual.VisualConstructorOptions;\nimport DialogConstructorOptions = powerbiVisualsApi.extensibility.visual.DialogConstructorOptions;\nvar powerbiKey: any = \"powerbi\";\nvar powerbi: any = window[powerbiKey];\nvar barChart571547D49DBA47FDAE8EFFA2E698626C_DEBUG: IVisualPlugin = {\n    name: 'barChart571547D49DBA47FDAE8EFFA2E698626C_DEBUG',\n    displayName: 'barChart',\n    class: 'Visual',\n    apiVersion: '5.1.0',\n    create: (options: VisualConstructorOptions) => {\n        if (Visual) {\n            return new Visual(options);\n        }\n        throw 'Visual instance not found';\n    },\n    createModalDialog: (dialogId: string, options: DialogConstructorOptions, initialState: object) => {\n        const dialogRegistry = globalThis.dialogRegistry;\n        if (dialogId in dialogRegistry) {\n            new dialogRegistry[dialogId](options, initialState);\n        }\n    },\n    custom: true\n};\nif (typeof powerbi !== \"undefined\") {\n    powerbi.visuals = powerbi.visuals || {};\n    powerbi.visuals.plugins = powerbi.visuals.plugins || {};\n    powerbi.visuals.plugins[\"barChart571547D49DBA47FDAE8EFFA2E698626C_DEBUG\"] = barChart571547D49DBA47FDAE8EFFA2E698626C_DEBUG;\n}\nexport default barChart571547D49DBA47FDAE8EFFA2E698626C_DEBUG;"],"names":[],"sourceRoot":""}